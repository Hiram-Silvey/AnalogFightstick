syntax = "proto3";

package hs.profile;

// Next available ID: 5
message Profile {
  string name = 1;

  // Next available ID: 1
  enum Platform {
    UNKNOWN = 0;
    PC = 1;
    SWITCH = 2;
  }

  // Next available ID: 3
  message PlatformConfig {
    Platform platform = 1;
    int32 position = 2;
  }

  repeated PlatformConfig platform_config = 2;

  // Next available ID: 21
  message Layout {
    // Next available ID: 25
    enum DigitalAction {
      NO_OP = 0;
      X = 1;
      CIRCLE = 2;
      TRIANGLE = 3;
      SQUARE = 4;
      L1 = 5;
      L2 = 6;
      L3 = 7;
      R1 = 8;
      R2 = 9;
      R3 = 10;
      OPTIONS = 11;
      SHARE = 12;
      HOME = 13;
      CAPTURE = 14;
      D_PAD_UP = 15;
      D_PAD_DOWN = 16;
      D_PAD_LEFT = 17;
      D_PAD_RIGHT = 18;
      R_STICK_UP = 19;
      R_STICK_DOWN = 20;
      R_STICK_LEFT = 21;
      R_STICK_RIGHT = 22;
      SLIDER_LEFT_MIN = 23;
      SLIDER_LEFT_MAX = 24;
      SLIDER_RIGHT_MIN = 25;
      SLIDER_RIGHT_MAX = 26;
    }

    // Next available ID: 3
    message AnalogAction {
      // Next available ID: 5
      enum ID {
        NO_OP = 0; 
        R_STICK_Y = 1;
        R_STICK_X = 2;
        SLIDER_LEFT = 3;
        SLIDER_RIGHT = 4;
      }

      ID id = 1;
      int32 value = 2;
    }

    // Next available ID: 3
    message Action {
      oneof action_type {
        DigitalAction digital = 1;
        AnalogAction analog = 2;
      }
    }

    Action thumb_top = 1;
    Action thumb_middle = 2;
    Action thumb_bottom = 3;
    Action index_top = 4;
    Action index_middle = 5;
    Action middle_top = 6;
    Action middle_middle = 7;
    Action middle_bottom = 8;
    Action ring_top = 9;
    Action ring_middle = 10;
    Action ring_bottom = 11;
    Action pinky_top = 12;
    Action pinky_middle = 13;
    Action pinky_bottom = 14;
    Action left_index_extra = 15;
    Action left_middle_extra = 16;
    Action left_ring_extra = 17;
    Action right_index_extra = 18;
    Action right_middle_extra = 19;
    Action right_ring_extra = 20;
  }

  Layout layout = 3;

  // If set, the joystick will behave as a DIGITAL joystick rather than an
  // ANALOG one. This threshold represents the percentage [0-100] of tilt
  // required for the joystick to output a fully pressed value in a given
  // cardinal direction. For example, if threshold is set to 100, the joystick
  // must be fully tilted up, down, left, or right to output a fully pressed
  // value in that direction. If it's set to 50, the joystick must be tilted
  // halfway (or more) between the neutral position and fully pressed position
  // up, down, left, or right to output a fully pressed value in that
  // direction. Any tilt below the threshold will output a neutral joystick
  // position.
  float digital_threshold = 4;
}